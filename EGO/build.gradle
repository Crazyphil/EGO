apply plugin: 'com.android.application'

repositories {
    maven { url 'https://jitpack.io' }  // For android-support-v4-preferencefragment
    //flatDir { dirs 'libs' } // For local .aar lib files
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'tk.crazysoft.ego'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 10
        versionName '3.0.0'
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    dataBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword ''
            keyAlias 'androidreleasekey'
            keyPassword ''
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
    }
    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    // improved build speeds for apps that set minSdkVersion to 20 or lower
    implementation 'com.android.support:preference-v14:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'net.sf.opencsv:opencsv:2.3@jar'
    implementation 'org.osmdroid:osmdroid-android:5.6.5'
    implementation 'com.github.MKergall:osmbonuspack:6.4'
    implementation 'com.graphhopper:graphhopper-core:0.10.0'
    implementation 'org.slf4j:slf4j-android:1.7.25@jar'
    implementation 'ch.acra:acra:4.11'
    implementation files('libs/proj4j-0.1.0.jar')
}

// Copy release builds including their proguard mapping file to a zip file
// Source: http://stackoverflow.com/questions/21434554/copying-apk-file-in-android-gradle-project/21610270#21610270
def releasePath = file("${rootDir}/release")

def releaseTask = tasks.create(name: 'release') {
    group 'Build'
    description "Assembles and archives all Release builds"
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        def build = variant.name.capitalize()

        def releaseBuildTask = tasks.create(name: "release${build}", type: Zip) {
            group 'Build'
            description "Assembles and archives apk and its proguard mapping for the $build build"
            destinationDir releasePath
            baseName variant.applicationId
            if (!variant.buildType.applicationIdSuffix) {
                appendix variant.buildType.name
            }
            if (variant.versionName) {
                version "${variant.versionName}_${variant.versionCode}"
            } else {
                version "$variant.versionCode"
            }
            def archiveBaseName = archiveName.replaceFirst(/\.${extension}$/, '')
            variant.outputs.all { output ->
                from(output.outputFileName) {
                    rename '.*', "${archiveBaseName}.apk"
                }
            }
            if (variant.buildType.minifyEnabled) {
                from(variant.mappingFile.parent) {
                    include 'mapping.txt'
                    rename '(.*)', "${archiveBaseName}-proguard_\$1"
                }
            }
        }
        releaseBuildTask.dependsOn variant.assembleProvider

        variant.productFlavors.each { flavor ->
            def flavorName = flavor.name.capitalize()
            def releaseFlavorTaskName = "release${flavorName}"
            def releaseFlavorTask
            if (tasks.findByName(releaseFlavorTaskName)) {
                releaseFlavorTask = tasks[releaseFlavorTaskName]
            } else {
                releaseFlavorTask = tasks.create(name: releaseFlavorTaskName) {
                    group 'Build'
                    description "Assembles and archives all Release builds for flavor $flavorName"
                }
                releaseTask.dependsOn releaseFlavorTask
            }
            releaseFlavorTask.dependsOn releaseBuildTask
        }
    }
}